{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Understanding Input Data\n",
    "\n",
    "Input data must have columns:\n",
    "\n",
    "* `score`\n",
    "* `label_value`\n",
    "* at least one attribute. e.g. `race`, `sex` and `age`.\n",
    "\n",
    "\n",
    "All columns in the input data are assumed to be groups with the exception of the following reserved columns.\n",
    "\n",
    "\n",
    "| score     | label_value| race | sex | age | income|\n",
    "| --------- |------------| -----| --- | ------- | ----|\n",
    "|   0       | 1          | African-American | Male | 25 | 180000 |\n",
    "|   1       | 1          | Caucasian | Male | 37 | 34000|\n",
    "\n",
    "\n",
    "Reserved column name:\n",
    "\n",
    "* `id`\n",
    "* `model_id`\n",
    "* `entity_id`\n",
    "* `rank_abs`\n",
    "* `rank_pct`\n",
    "\n",
    "## `score`\n",
    "\n",
    "By default, Aequitas assumes the `score` column is a binary decision (0 or 1). Alternatively, the `score` column can contain the score (e.g. the output from a logistic regression applied to the data). In this case, the user sets a threshold to determine the binary decision. See [configurations](./config.html) for more on thresholds.\n",
    "\n",
    "## `label_value`\n",
    "\n",
    "This is the ground truth value of a binary decision. The data must be 0 or 1.\n",
    "\n",
    "## attributes e.g. `race`, `sex`, `age`,`income`\n",
    "\n",
    "Group columns can be categorical or continuous. If categorical, Aequitas will produce crosstabs with bias metrics for each group_level. If continuous, Aequitas will first bin the data into quartiles.\n",
    "\n",
    "## `model_id`\n",
    "\n",
    "`model_id` is an identifier tied to the output of a specific model. With a `model_id` column you can test the bias of multiple models at once. This feature is available in CLI only. The webapp does not currently support multiple models.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
